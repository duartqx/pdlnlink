#!/usr/bin/env bash

PLAYLISTFLDR=~/.local/share/Playlist.d
PFLDRBKP=/tmp/Playlist-bkp
PLAYLISTFILE=~/.local/share/playlist
PLAYLISTFILEbkp=/tmp/playlist-bkp

YTDLCONC='--ytdl-raw-options=concurrent-fragments=50'
# shellcheck disable=SC2089
YTDLQLTY='--ytdl-format="bestvideo[height<=1080]+bestaudio/best[height<=1080]"'

DM_OPTIONS='check-playlist
full-playlist
send-to-playlist
edit-playlist-file
get-playlist-bkp
primary-to-clipboard
stop-ytb-or-clean
torrent
ytdl
ytdl-mix'
# The options on the initial dmenu prompt

CHOICE=$(echo "$DM_OPTIONS" | dmenu -i)
# If no DM_OPTIONS/CHOICE was selected, exits
[[ -z $CHOICE ]] && exit
CLIP=$(xclip -selection clipboard -o 2>/dev/null) # The clipboard content

getPlaylistLine() {
    sed -e 1$'{w/dev/stdout\n;d}' -i~ "$1" | \
        tee -a $PLAYLISTFILEbkp | awk '{print $NF}'
}

stopYtbOrClear() {
    killall yt-dlp
    rm $PLAYLISTFLDR/{*.part*,*.f251.*,*.f303.*,*.ytdl}
}

ytbNotify() {
    youtube-dl -f "${YTDLQLTY:15:-1}" "--${YTDLCONC:19}" \
        --match-filter !is_live --add-chapters \
        --newline --no-playlist "$1" 2>&1 | send2notify -p
}


case "$CHOICE" in

"full-playlist")
    if [[ -f $PLAYLISTFILE ]]; then
        # if playlist exists and is not empty
        PLAYLIST_LIST=$(
            cat $PLAYLISTFILE \
                | awk '{print $NF}' \
                | awk -F '=' '{gsub("$", ",", $2); printf $2}')
        minilinkhandler "https://youtube.com/embed/?playlist=$PLAYLIST_LIST&autoplay=1"
        cat $PLAYLISTFILE >> $PLAYLISTFILEbkp
        rm $PLAYLISTFILE
    else
        notify-send "Local playlist is probably Empty" && exit 1
    fi ;; 

"check-playlist") 
    F_PLAYLIST=$(sed -e 's/^$*/🌐 /g' ${PLAYLISTFILE} 2>/dev/null)
    _LC=$(cat "$PLAYLISTFILE" | wc -l)
    # _LC returns the number of lines of the playlist file + the
    # downloaded files from the local playlist + an extra line for spacing

    if [[ -n $F_PLAYLIST ]]; then
        # If the playlist file has anything in it
        CHOICE2="$(echo "$F_PLAYLIST" | dmenu -i -l $_LC | awk '{print $NF}')"
    else
        notify-send 'Stream and Local Playlists Empty' && exit 1
    fi

    if [[ -n "$CHOICE2" ]]; then
        # Opens with minilinkhandler as an embed page
        minilinkhandler "https://youtube.com/embed/$(echo $CHOICE2 | awk -F '=' '{print $2}')?autoplay=1"
        echo $CHOICE2 >> $PLAYLISTFILEbkp
        grep -v "$CHOICE2" "$PLAYLISTFILE" > /tmp/tmpbkp
        [[ -n $(cat /tmp/tmpbkp) ]] && mv -f /tmp/tmpbkp $PLAYLISTFILE
        # if tmpbkp is not empty moves it to PLAYLISTFILE
    else
        pdlnmpv
    fi   ;;

"send-to-playlist") 
    send2notify -s "$CLIP" ;;

"edit-playlist-file") 
    # Needs a conditional because vim doesn't care if the file exits or not
    if [[ -s ${PLAYLISTFILE} ]]; then
        alacritty -e nvim ${PLAYLISTFILE}
    else
        notify-send 'Playlist file is empty'
    fi 

    pdlnmpv ;;

"get-playlist-bkp")
    if [[ -s $PLAYLISTFILEbkp ]]; then
        # Gets the backup line
        TO_GET="$(cat $PLAYLISTFILEbkp | dmenu -i -l 10)"
        [[ -z $TO_GET ]] && exit
        # Saves it to the PLAYLISTFILE
        echo "$TO_GET" >> $PLAYLISTFILE
        # Removes the line from the playlist-bkp
        grep -v "$TO_GET" "$PLAYLISTFILEbkp" > /tmp/tmpbkp
        mv -f /tmp/tmpbkp $PLAYLISTFILEbkp
    #    tail -n 10 $PLAYLISTFILEbkp >> $PLAYLISTFILE
    #    notify-send 'Recovered Playlist'
    else
        notify-send 'Playlist Backup not found'
    fi 
    pdlnmpv ;;

"primary-to-clipboard") 
    xclip -o | xclip -selection clipboard
    notify-send 'Sent from Primary to Clipboard' ;;

"stop-ytb-or-clean")
    stopYtbOrClear ;;

"torrent") 
    tadd "$CLIP" ;;

"ytdl")  
    ytbNotify "$CLIP" ;;

"ytdl-mix") 
    cd ~/Media/Videos/Mixes/jMIX || exit 1
    ytbNotify "$CLIP" ;;

esac

# if the content of the clipboard wasn't a url and some of the option tried to
# use it, send the error to notify-send
if [[ "$?" == 1 && $CHOICE =~ (send-to-playlist|torrent) ]]; then 
    notify-send "Invalid or Not an URL" && exit 1
fi

exit
