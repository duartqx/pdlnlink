#!/usr/bin/env bash

PLAYLISTFLDR=~/.local/share/playlist.d
YTDLCONC='--ytdl-raw-options=concurrent-fragments=50'
YTDLQLTY='--ytdl-format="bestvideo[height<=1080]+bestaudio/best[height<=1080]"'
DM_OPTIONS='mpv-playlist
mpv
mpv-novid
download-playlist
play-local-playlist
check-playlist
send-to-playlist
edit-playlist-file
get-playlist-bkp
primary-to-clipboard
ytdl
ytdl-mix
torrent'
# The options on the initial dmenu prompt
CHOICE=$(echo "$DM_OPTIONS" | dmenu -i)
CLIP=$(xclip -selection clipboard -o 2>/dev/null) # The clipboard content

[[ -z $CHOICE ]] && exit

bkpLocal() {
    # Backup local playlist to a tmp folder - Gets cleared on reboot
    mkdir -p /tmp/playlist-bkp # Creates the bkp folder if it doesn't exists
    mv $PLAYLISTFLDR/* /tmp/playlist-bkp/ # Moves all files to the bkp folder
}
bkpPlaylistFile() {
    cat ~/.local/share/playlist > ~/.local/share/playlist-bkp
    rm ~/.local/share/playlist
}
checkPlaylist() {
    checkPlaylist="$(find $PLAYLISTFLDR/* -type f)"
    if [[ -n "$checkPlaylist" ]]; then return 0; else return 1; fi
}
playLocal() {
    cd $PLAYLISTFLDR
    ls -rt | mpv --fs -playlist -
    # The substitution escapes the spaces
    # If mpv returns an error, the playlist is probably empty
    if [[ $? == 1 ]]; then
        notify-send "Local playlist is probably Empty"
        exit 1
    else
        bkpLocal
        exit
    fi
}
ytbNotify() {
    youtube-dl -f ${YTDLQLTY:15:-1} "--${YTDLCONC:19}" \
        --add-chapters --newline \
        "$CLIP" 2>&1 | send2notify -p
}

case "$CHOICE" in

"mpv-playlist") 
    if checkPlaylist; then
        # Plays local playlist if there's files in it
        playLocal
    else
        # Streams using the links at .local/share/playlist
        mpv "$YTDLQLTY" "$YTDLCONC" --fs --x11-name=feed \
        $(awk '{print $NF}' ~/.local/share/playlist || \
        notify-send 'Playlist is empty') || \
        notify-send 'mpv failed to open playlist'
        bkpPlaylistFile
    fi ;; 

"mpv") 
    mpv "${YTDLQLTY//1080/720}" "$YTDLCONC" --fs --loop \
        "$CLIP" >/dev/null 2>&1 ;;

"mpv-novid") 
    xterm -e mpv "$YTDLCONC" --vid=no --loop "$CLIP" ;;

"download-playlist")
    if [[ -f ~/.local/share/playlist ]]; then
        notify-send "Downloading Playlist"
        cd $PLAYLISTFLDR
        youtube-dl -f ${YTDLQLTY:15:-1} "--${YTDLCONC:19}" \
            --add-chapters --newline --no-abort-on-error \
            $(awk '{print $NF}' ~/.local/share/playlist) 2>&1 | send2notify -p
        bkpPlaylistFile
    else
        notify-send "Playlist file is empty"
        exit 1
    fi ;;

"play-local-playlist")
    if checkPlaylist; then
        # If the playlist folder isn't empty, tries to play the files in it
        # with mpv
        playLocal
    else
        # If the playlist is empty notifies it's empty and exit 1
        notify-send "Local playlist is Empty"
        exit 1
    fi ;;

"check-playlist") 
    F_PLAYLIST=$(sed -e 's/^$*/🌐 /g' ~/.local/share/playlist 2>/dev/null)
    L_PLAYLIST="$(find $PLAYLISTFLDR/* -printf "%T@ 📂 %f\n" 2>/dev/null | \
                  sort -k1 | cut -d ' ' -f2-)"
    # sed is used on F_PLAYLIST to substitute the start of the lines with the
    # 'globe with meridians' emoji to symbolize that it's a video on the
    # internet/stream. while L_PLAYLIST has a folder at the start of every line
    # to symbolize that it's a local file
    PLIST_LC=$(( `echo "$F_PLAYLIST" | wc -l` + `echo "$L_PLAYLIST" | wc -l` + 1 ))
    # PLIST_LC returns the number of lines of the playlist file + the
    # downloaded files from the local playlist + an extra line for spacing
    if [[ -n $F_PLAYLIST && -n $L_PLAYLIST ]]; then
        # If F_PLAYLIST and L_PLAYLIST are not empty, prints both
        echo -e "$F_PLAYLIST\n\n$L_PLAYLIST" | dmenu -l $PLIST_LC;
    elif [[ -n $F_PLAYLIST ]]; then
        # If the file playlist has content and the local downloaded playlist is
        # empty, prints the file
        echo "$F_PLAYLIST" | dmenu -l $PLIST_LC;
    elif [[ -n $L_PLAYLIST ]]; then
        # If only the L_PLAYLIST isn't empty, prints it
        echo "$L_PLAYLIST" | dmenu -l $PLIST_LC;
    else
        notify-send 'Stream and Local Playlists Empty'
        exit 1
    fi
    pdlnmpv ;;

"send-to-playlist") 
    send2notify "$CLIP" ;;

"edit-playlist-file") 
    # Needs a conditional because vim doesn't care if the file exits or not
    if [[ -f ~/.local/share/playlist ]]; then
        xterm -e nvim ~/.local/share/playlist
    else
        notify-send 'Playlist file is empty'
    fi 
    pdlnmpv ;;

"get-playlist-bkp")
    if [[ -f ~/.local/share/playlist-bkp ]]; then
        cat ~/.local/share/playlist-bkp > ~/.local/share/playlist
        notify-send 'Recovered Playlist'
    else
        notify-send 'Playlist Backup not found'
    fi 
    pdlnmpv ;;

"primary-to-clipboard") 
    echo "$CLIP" | xclip -selection clipboard
    notify-send 'Sent from Primary to Clipboard' ;;

"torrent") 
    tadd "$CLIP" ;;

"ytdl")  
    ytbNotify ;;

"ytdl-mix") 
    cd ~/Media/Videos/Mixes/jMIX
    ytbNotify ;;

esac

# if the content of the clipboard wasn't a url and some of the option tried to
# use it, send the error to notify-send
if [[ "$?" == 1 ]]; then
    notify-send "Invalid or Not an URL"
    exit 1
fi

exit
