#!/usr/bin/env bash

PLAYLISTFLDR=~/.local/share/Playlist.d
PFLDRBKP=/tmp/Playlist-bkp
PLAYLISTFILE=~/.local/share/playlist
PLAYLISTFILEbkp=/tmp/playlist-bkp
YTDLCONC='--ytdl-raw-options=concurrent-fragments=50'
YTDLQLTY='--ytdl-format="bestvideo[height<=1080]+bestaudio/best[height<=1080]"'
DM_OPTIONS='mpv-playlist
mpv
mpv-novid
download-playlist
check-playlist
send-to-playlist
edit-playlist-file
get-playlist-bkp
get-local-backup
primary-to-clipboard
ytdl
ytdl-mix
torrent'
# The options on the initial dmenu prompt
CHOICE=$(echo "$DM_OPTIONS" | dmenu -i)
CLIP=$(xclip -selection clipboard -o 2>/dev/null) # The clipboard content

# If no DM_OPTIONS was selected, exits
[[ -z $CHOICE ]] && exit

bkpLocal() {
    # Backup local playlist to a tmp folder - Gets cleared on reboot
    mkdir -p $PFLDRBKP # Creates the bkp folder if it doesn't exists
    mv $PLAYLISTFLDR/* $PFLDRBKP/ # Moves all files to the bkp folder
}

checkLocalPlaylist() {
    # Returns 0 if the playlist is not empty, 1 if it is
    [[ -n "$(find $PLAYLISTFLDR/* -type f)" ]]
}

getLocalBKP() {
    if [[ -n "$(find $PFLDRBKP -type f)" ]]; then
        notify-send 'Getting files from Backup'
        mv $PFLDRBKP/* $PLAYLISTFLDR/
        notify-send 'Backup restored'
    else
        notify-send 'No Backup files found'
        exit 1
    fi
}

getPlaylistLine() {
    sed -e 1$'{w/dev/stdout\n;d}' -i~ "$1" | \
        tee -a $PLAYLISTFILEbkp | awk '{print $NF}'
}

playLocal() {
    cd $PLAYLISTFLDR
    ls -rt | mpv --fs -playlist -
    # The substitution escapes the spaces
    # If mpv returns an error, the playlist is probably empty
    if [[ $? == 1 ]]; then
        notify-send "Local playlist is probably Empty" && exit 1
    else
        bkpLocal && exit
    fi
}

ytbNotify() {
    youtube-dl -f ${YTDLQLTY:15:-1} "--${YTDLCONC:19}" \
        --add-chapters --newline --throttled-rate 600K \
        --no-playlist --no-abort-on-error "$1" 2>&1 | send2notify -p
}


case "$CHOICE" in

"mpv-playlist") 
    if checkLocalPlaylist; then
        # Plays local playlist if there's files in it
        playLocal

    else
        # Streams using the links from the playlist file
        mpv "$YTDLQLTY" "$YTDLCONC" --fs --x11-name=feed \
        $(awk '{print $NF}' ${PLAYLISTFILE} || \
        notify-send 'Playlist is empty') || \
        notify-send 'mpv failed to open playlist'
        mv $PLAYLISTFILE $PLAYLISTFILEbkp
    fi ;; 

"mpv") 
    mpv "$YTDLCONC" --fs --loop "$CLIP" ;;

"mpv-novid") 
    xterm -e mpv "$YTDLCONC" --vid=no --loop "$CLIP" ;;

"download-playlist")
    if [[ -s ${PLAYLISTFILE} ]]; then
        notify-send "Downloading Playlist"
        cd $PLAYLISTFLDR
        while [[ -s $PLAYLISTFILE ]]; do
            # Pops line from playlist file and sends it to ytbNotify
            ytbNotify $(getPlaylistLine $PLAYLISTFILE)
        done
        notify-send "Finished Downloading"
    else
        notify-send "Playlist file is empty" && exit 1
    fi ;;

"check-playlist") 
    F_PLAYLIST=$(sed -e 's/^$*/🌐 /g' ${PLAYLISTFILE} 2>/dev/null)
    L_PLAYLIST="$(find $PLAYLISTFLDR/* -printf "%T@ 💽 %f\n" 2>/dev/null | \
                  sort -k1 | cut -d ' ' -f2-)"
    # sed is used on F_PLAYLIST to substitute the start of the lines with the
    # 'globe with meridians' emoji to symbolize that it's a video on the
    # internet/stream. while L_PLAYLIST has a folder at the start of every line
    # to symbolize that it's a local file

    PLIST_LC=$(( `echo "$F_PLAYLIST" | wc -l` + `echo "$L_PLAYLIST" | wc -l` + 1 ))

    # PLIST_LC returns the number of lines of the playlist file + the
    # downloaded files from the local playlist + an extra line for spacing

    if [[ -n $F_PLAYLIST && -n $L_PLAYLIST ]]; then
        # If F_PLAYLIST and L_PLAYLIST are not empty, prints both
        CHOICE2="$(echo -e "$F_PLAYLIST\n\n$L_PLAYLIST" | dmenu -l $PLIST_LC)"

    elif [[ -n $F_PLAYLIST ]]; then
        # If the file playlist has content and the local downloaded playlist is
        # empty, prints the file
        CHOICE2="$(echo "$F_PLAYLIST" | dmenu -l $PLIST_LC)"

    elif [[ -n $L_PLAYLIST ]]; then
        # If only the L_PLAYLIST isn't empty, prints it
        CHOICE2="$(echo "$L_PLAYLIST" | dmenu -l $PLIST_LC)"

    else
        notify-send 'Stream and Local Playlists Empty' && exit 1
    fi

    # If a video is selected during check, plays it
    if [[ -n "$CHOICE2" ]]; then
        cd $PLAYLISTFLDR
        mpv --fs "${CHOICE2:2}"
        # Backups after playing
        mkdir -p $PFLDRBKP
        mv "${CHOICE2:2}" $PFLDRBKP

    else
        pdlnmpv
    fi   ;;

"send-to-playlist") 
    send2notify -s "$CLIP" ;;

"edit-playlist-file") 
    # Needs a conditional because vim doesn't care if the file exits or not
    if [[ -s ${PLAYLISTFILE} ]]; then
        xterm -e nvim ${PLAYLISTFILE}

    else
        notify-send 'Playlist file is empty'
    fi 

    pdlnmpv ;;

"get-playlist-bkp")
    if [[ -s $PLAYLISTFILEbkp ]]; then
        tail -n 10 $PLAYLISTFILEbkp >> $PLAYLISTFILE
        notify-send 'Recovered Playlist'
    else
        notify-send 'Playlist Backup not found'
    fi 
    pdlnmpv ;;

"get-local-backup")
    getLocalBKP ;;

"primary-to-clipboard") 
    xclip -o | xclip -selection clipboard
    notify-send 'Sent from Primary to Clipboard' ;;

"torrent") 
    tadd "$CLIP" ;;

"ytdl")  
    ytbNotify "$CLIP" ;;

"ytdl-mix") 
    cd ~/Media/Videos/Mixes/jMIX
    ytbNotify "$CLIP" ;;

esac

# if the content of the clipboard wasn't a url and some of the option tried to
# use it, send the error to notify-send
if [[ "$?" == 1 && $CHOICE =~ (send-to-playlist|torrent) ]]; then 
    notify-send "Invalid or Not an URL" && exit 1
fi

exit
