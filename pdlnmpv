#!/usr/bin/env bash

PLAYLISTFLDR=~/.local/share/Playlist.d
PLAYLISTFILE=~/.local/share/playlist
PLAYLISTFILEbkp=/tmp/playlist-bkp

YTDLCONC='--ytdl-raw-options=concurrent-fragments=50'
# shellcheck disable=SC2089
YTDLQLTY='--ytdl-format="bestvideo[height<=1080]+bestaudio/best[height<=1080]"'

DM_OPTIONS='check-playlist
full-playlist
send-to-playlist
edit-playlist-file
get-playlist-bkp
primary-to-clipboard
stop-ytb-or-clean
torrent
ytdl
ytdl-mix'
# The options on the initial dmenu prompt

CHOICE=$(dmenu -i <<<"$DM_OPTIONS")
# If no DM_OPTIONS/CHOICE was selected, exits
[[ -z $CHOICE ]] && exit

# The clipboard content
CLIP=$(xclip -selection clipboard -o 2>/dev/null)

getPlaylistLine() {
    # shellcheck disable=SC2317
    sed -e 1$'{w/dev/stdout\n;d}' -i~ "$1" |
        tee -a "$PLAYLISTFILEbkp" |
        awk '{print $NF}'
}

ytbNotify() {
    youtube-dl -f "${YTDLQLTY:15:-1}" "--${YTDLCONC:19}" \
        --match-filter !is_live \
        --add-chapters --embed-metadata --embed-thumbnail \
        --newline --no-playlist "$1" 2>&1 |
        send2notify -p
}

exec_mpv() {
    xterm -g 76x5-1-1 -class XTerm-float -e mpv "${YTDLQLTY:1:-1}" "$@" --fs
}

case "$CHOICE" in

"full-playlist")
    if [[ -f $PLAYLISTFILE ]]; then
        # if playlist exists and is not empty
        PLAYLIST_LIST="$(awk '{printf "%s ", $NF}' <$PLAYLISTFILE)"
        # shellcheck disable=SC2086
        exec_mpv $PLAYLIST_LIST
        cat $PLAYLISTFILE >>$PLAYLISTFILEbkp
        rm $PLAYLISTFILE
    else
        send2notify "Local playlist is probably Empty" && exit 1
    fi
    ;;

"check-playlist")
    if [[ -s $PLAYLISTFILE ]]; then
        # If the playlist file has anything in it
        PLAYLIST_CHOICE="$(dmenu -i -l 10 <"$PLAYLISTFILE")"
    else
        send2notify 'Stream and Local Playlists Empty' && exit 1
    fi

    if [[ -n "$PLAYLIST_CHOICE" ]]; then
        CHOICE_URL="$(awk '{print $NF}' <<<"$PLAYLIST_CHOICE")"
        exec_mpv "$CHOICE_URL"
        echo "$PLAYLIST_CHOICE" >>$PLAYLISTFILEbkp
        sed -i "/$(sed -e 's/\//\\\//g' <<<"$CHOICE_URL")/d" $PLAYLISTFILE
    else
        pdlnmpv
    fi
    ;;

"send-to-playlist")
    send2notify -s "$CLIP"
    ;;

"edit-playlist-file")
    # Needs a conditional because vim doesn't care if the file exits or not
    if [[ -s $PLAYLISTFILE ]]; then
        $TERMINAL -e nvim $PLAYLISTFILE
    else
        send2notify 'Playlist file is empty'
    fi

    pdlnmpv
    ;;

"get-playlist-bkp")
    if [[ -s $PLAYLISTFILEbkp ]]; then
        # Gets the backup line
        TO_GET="$(dmenu -i -l 10 <$PLAYLISTFILEbkp)"
        [[ -z $TO_GET ]] && exit
        # Saves it to the PLAYLISTFILE
        echo "$TO_GET" >>$PLAYLISTFILE
        # Removes the line from the playlist-bkp
        sed -i "/$(sed -e 's/\//\\\//g' <<<"$TO_GET")/d" $PLAYLISTFILEbkp
    else
        send2notify 'Playlist Backup not found'
    fi
    pdlnmpv
    ;;

"primary-to-clipboard")
    xclip -o | xclip -selection clipboard
    send2notify 'Sent from Primary to Clipboard'
    ;;

"stop-ytb-or-clean")
    killall yt-dlp
    rm $PLAYLISTFLDR/{*.part*,*.f251.*,*.f303.*,*.ytdl}
    ;;

"torrent")
    tadd "$CLIP"
    ;;

"ytdl")
    ytbNotify "$CLIP"
    ;;

"ytdl-mix")
    cd ~/Media/Videos/Mixes/jMIX || exit 1
    ytbNotify "$CLIP"
    ;;

esac

# if the content of the clipboard wasn't a url and some of the option tried to
# use it, send the error to notify-send
if [[ "$?" == 1 && $CHOICE =~ (send-to-playlist|torrent) ]]; then
    send2notify "Invalid or Not an URL" && exit 1
fi

exit
